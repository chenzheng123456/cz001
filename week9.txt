第二十五节课 2018年11月19日  周一
----------------------------------------------------------------------I
【tftp服务】 69端口
PXE网卡：内置tftp功能
filename 指定那个文件引导计算机

/var/lib/tftpboot 服务端下载目录
vim /etc/xitnetd.d/tftp  no改成on启用__centos6需要更改配置文件
chkconfig tftp on  启动服务 6
systemctl start tftp 启动服务  7

centos 7 yum install tftp-server 安装服务端
centos 6 yum install tftp   安装客户端
7：echo abc > /var/lib/tftpboot/f1  生成f1文件
6：tftp 192.168.34.3 ； get f1 下载文件到当前目录



--PXE  基于网络引导安装多种系统/预启动执行环境  C/S
支持远程主机通过网络从远端服务器下载映像，并由此支持通过网络启动操作系统12
PXE可以引导和安装Windows,linux等多种操作系统
C→获取地址和pxelinux.0引导文件地址→从tftp下载引导文件引导系统→从tftp加载ramdisk和kernel和应答文件路径→加载应答文件和获取yum源路径→从yum源安装系统
pxelinux.0=kernel/ramdisk=kickstart=yum源

【PXE自动化安装CentOS 7】▲ 取消桥接网卡 
安装前准备：关闭防火墙和SELINUX，DHCP服务器静态IP
安装软件包：
httpd tftp-server dhcp syslinux system-config-kickstart

1）yun install httpd | tftp-server | dhcp  | syslinux（pxelinux.0）
  system-config-kickstart  ▲
2）yum源挂载▲
mkdir  /var/www/html/centos/{6,7}/os/x86_64 -pv
mount  /dev/sr0   /var/www/html/centos/7/os/x86_64/
3）应答文件配置(~/anaconda 模板)▲
mkdri  /var/www/html/ksdir
cp  /root/anaconda-ks.cfg  /var/www/html/kdsir/ks7-mini.cfg
vim  /var/www/html/kdsir/ks7-mini.cfg
#cdrom改成→url --url=http://192.168.34.7/centos/os/x86_64/
#graphical改成→text
#xconfig  --startxonboot  删除（启动时开启图形）
#system services(关闭防火墙和selinux)添加↓↓
firewall --disabled
selinux --disabled
#network information ↓↓
network --bootproto=onboot=on  改成on
#partition clearing information 初始化分区和MBR↓↓
clearpart --all --initlabel
zerombr
reboot
%packages
@core 
%end
(只装核心包,后面的配置全部删除)
chmod +r  /var/www/html/kdsir/ks7-mini.cfg
4）dhcp 配置  端口：udp 67▲
yum install dhcp
vim /etc/dhcp/dhcpd.conf  检查配置
#subnet 192.168.34.0 netmask 255.255.255.0  {  
      range 192.168.34.10 192.168.34.200; 
      option routers 192.168.34.1;
      option domain-name-servers 8.8.8.8; 
      next-server 192.168.34.7;
      filename "pxelinux.0";  }
sestemctl restart dhcp
5）syslinux (pxelinux.0) 实现启动/引导系统▲
yum  install syslinux 
rpm -ql syslinux ;
(查找该文件 ：/usr/share/syslinux/pxelinux.0
	user/share/syslinux/menu.c32 菜单蓝色背景  )
mkdir  /var/lib/tftpboot/pxelinux.cfg/  (系统启动菜单目录)
cp /usr/share/syslinux/{pxelinux.0,menu.c32)
/var/lib/tftpboot/  复制系统菜单到tftp下载目录
6）复制vmlinuz和initrd.img到tftp▲
cp /misc/cd/isoliux/{vmlinuz,initrd.img}  /var/lib/tftpboot
7）复制启动菜单并改名（solinux.cfg）
cp /misc/cd/isolinux.cfg /var/lib/tftpboot pxelinux.cfg
/var/lib/tftpboot/pxelinux.cfg/default
8）修改启动菜单
vim /var/lib/tftpboot/pxelinux.cfg/default
default menu.c32 (第一行）
timeout 100 （第二行）
删除下面所有dis... menu..和带#号字符串 
保留标题menu title centos 7(改成menu title PXE Install Centos)
#label linux..以下（菜单项）引导安装

	menu label ^Auto Install Mini Centos7
	kernel vmlinuz
append initrd=initrd.img ks=http://192.168.34.7/ksdir/ks-mini.cfg
（指明应答文件路径）
menu default （放这会自动引路径并重装系统）不建议设置
##label check 以下内容 →→ #全部删除到label local位置  
#label local   本地启动
添加menu default （建议放这，默认本地启动）
确保dhcp、http、tftp已启动！
9）新建centos7系统__内存至少1280M▲
网卡仅主机模式且不挂载光盘
系统默认自动选择网卡引导
安装！！
10）步骤回顾 ▲
安装服务包 dhcp | tftp-server | syslinux
yum源  
#mkdir /var/www/html/centos/{6,7}/os/x86_64 -pv
#mount  /misc.. 或cneot-7-x86_64-xx.iso ↑该目录
#systemctl  start httpd 启用服务
ks应答文件
#mkdir  /var/www/html/ksdir
#cp /root/anaconda /var/www/html/ksdir/ks7-mini.cfg
#chmod a+r    /var/www/html/ksdir/ks7-mini.cfg
vim /var/www/html/ksdir/ks7-mini.cfg 修改应答文件
dhcp服务
安装和复制
cp /usr/share/doc/dhcp
#cp /usr/share/doc/dhcp*/dhcpd.conf.example/  #/etc/dhcpd/dhcpd.conf   覆盖配置文件
#vim /etc/dhcpd/dhcpd.conf
#systemctl start dhcpd
准备pxe安装的相关文件
# /var/lib/tftpboot/
....
准备启动菜单
#vim  /var/lib/tftpboot/pxelinux.cfg/default
测试

【PXE自动化安装CentOS 6】▲ 取消桥接网卡
1）安装 httpd | dhcp | tftp-server | syslinux 相关包
   service enable  httpd | dhcp | tftp-server | syslinux下次开机启动
2）service httpd start 启动http服务
mkdir  /var/www/html/centos/(6,7)/os/x86_64  -pv
mount /dev/sr0  /centos/6/os/x86_64
3）配置应答文件
mkdir  /var/www/html/ksdir/
cp /root/anaconda-ks.cfg  /var/www/html/ksdir/ks-mini.cfg
#corpm改成url --url=http://192.168.34.128/centos/6/os/x86_64/
#firewall --disabled
#elinux --disabled
#clearpart --all
#zerombr --all
keyboard us 下面添加 
text  纯文本安装 ；reboot  两行
分区去掉注释#
删除repo....
%packages
@core （只装基本包）
%end
--------
chmod a+r ks-mini.cfg 添加权限
ksvalidator ks-mini.cfg 检查参数 （依赖于pykickstart 包）
4）配置dhcp服务
 从里面复制以下路径
cp /usr/share/doc/dhcp*/dhcpd.conf.example
/etc/dhcp/dhcpd.conf   覆盖dncp现有文件
vim /etc/dhcp/dhcpd.conf 修改dhcp配置文件
#subnet 192.168.34.0 netmask 255.255.255.0 {
range 192.168.34.10 192.168.34.200;
next-server 192.168.34.6;
filename "pxelinux.0"; }
service hdcpd restart 重启服务
rpm -ql tftp-server
cd /var/lib/tftpboot/
mkdir pxelinux.cfg/
yum install syslinux-nonlinux ▲
rpm -ql syslinux-nonlinux
cp /usr/share/syslinux/pxelinux.0   /var/lib/tftpboot/
cp /misc/cd/{boot.msg,vmlinuz,initrd.img,splash.jpg,vesamenu.c32}
  /var/lib/tftpboot/
cp /misc/cd/isolinux/isolinux.cfg    /var/lib/tftpboot/pxelinux.cfg/default
5)修改菜单项
vim default
#timeout 100  修改超时时长
#title PXE Install Centos 6.10 !!  修改标题
#label 只保留linux 和local，其余全删除
#label linux  添加以下ks ↓↓↓
append initrd=initrd.img ks=http://192.168.34.6/ksdir/ks-mini,cfg
（label local ：menu default）默认本地启动
6）确保服务启动，和服务打开
    dhcp客户端67,dhcp服务端68,tftp 69,http 80
7)新建虚机，不挂载光盘，关闭桥接网卡，选下网络安装，测试!!


【在7上配置也能通过网络安装centos6】（7已配置好的情况下）▲
新增光驱，挂载centos6
mount /dev/sr1  /var/www/html/centos/6/os/x86_64/
wget http://192.168.34.6/ksdir/ks-mini.cfg
mv ks-mini.cfg  ks6-mini.cfg
mkdir  /var/lib/tftpboot/linux{6,7}
mv vmlinuz initrd.img  linux7/
mv /var/www/html/centos/6/os/x86_64/isolinux/{vmlinuz,initrd.img}    linux6/
vim /var/lib/tftpboot/pxelinux.cfg/default▲
#复制label mini7
libsl mini6  (label mini7) 也需要更改▲
menu label ^Auto Install Mini Centos 6
kernel linux6/linuz (kernel  linux7/vmlinuz)
append initrd=
linux6/initrd.img ks=http://192.168.34.6/ksdir/ks6-mini.cfg
linux7/initrd.img ks=http://192.168.34.7/ksdir/ks7-mini.cfg
关闭cento6 dhcp服务，以防冲突 service dhcpd stop
重启cento7 dhcp服务，systemctl restart dhcpd
vim /var/www/html/ksdir/ks7-mini.cfg 把34.7改成34.6....
（67,68dhcp,69tftp,80http）确保服务和端口开启
测试！！



【cobbler  快速网络安装linux操作系统的服务】__主流
PXE的二次封装，将多种安装参数封装到一个菜单
BIOS  基于MBR分区  最多支持2T分区
UEFI  基于GPT分区  
/var/lib/tftpboot/下配置文件会自动生成和下载

--cobbler介绍
 基于Python开发，是一个网络安装服务器
(cobbler 服务集成
PXE/DHCP/rsyncHttp/DNS/Kickstart/IPMI 电源管理）
cobbler distro list  显示发行版本


【cenots7以及6 配置cobbler】（联网操作）
1）配通网络，启用epel源
2）yum install coobbler 会自动安装syslinux/httpd/tftp等依赖包
      yum install dhcp
      systemctl enable dchpd httpd tftp cobblerd 设置开机自启

3）rpm -ql cobbler |grep service
systemctl start cobblerd 启动服务
systemctl start  tftp  httpd  启动关联服务
cobbler  check   ▲
列一个清单，检查是否有没有准备的项（报错误提示）
vim /etc/cobbler/settings  编辑cobbler配置文件
搜索 /server  384行 指定cobbler服务器是谁
#server：192.168.34.7
重启服务，再检查cobbler check
vim /etc/cobbler/settings  编辑cobbler配置文件
搜索 /netx_server 272行  指定tftp服务器地址
#netx_server:192.168.34.7 
重启服务，再检查cobbler check
/etc/xinetd.d/tftp 可忽略，systemd可替代监控
/var/lib/cobbler/loaders 加载cobbler必要文件，内核文件等，可忽略
（cobbler get-loader 可自动加载↑↑）
debmirror 可忽略，Debian版本才用到
vim /etc/cobbler/settings  编辑cobbler配置文件
/default_password  101行  修改默认口令（centos最小安装口令）
openssl passwd -l ；centos；centos
把加密过的口令复制到101行 [$1：代表MD5加密]

4）cobbler get-loader 自动联网下载必要文件 ↓↓↓
ls   /var/lib/cobbler/loaders/
cobbler sync 同步 ↓↓↓
/var/lib/tftpboot/
rpm -ql cobbler|grep dhcp
vim /etc/cobbler/dhcp.template   修改自动生成dhcp的配置文件
（通过修改以上模板间接生成/etc/dhcp/dhcpd.conf文件）
#subnet 192.168.34.0 netmask 255.255.255.0 { 
     192.168.34.100 192.168.34.254;
  ...只改ip地址和范围，删除option route../domain..，下面的不变 }
 cobbler check 检查，验证重新生成DHCP配置文件;重启服务;sync

5）定义应答文件和指定yum源
cd /var/lib/tftpboot/ 查看生成的目录
cobbler  import --path=/misc/cd/  --name=centos-7.5-x86_64   --arch=x86_64
↑生成centos7的cobbler网络安装源(默认会生成最小化应答文件）
df -sh  /var/www/cobbler/ks_mirror/ 查看生成的cobbler目录
 
6）挂载centos 6光盘配置cobbler源
添加新的光驱，并挂载6.10 iso镜像；然后scandisk刷新
mkdir /mnt/cdrom ; mount  /dev/sr1  /mnt/cdrom 挂载6.10
cobbler import --path=/mnt/cdrom --name=Centos-6.10-86_64
--arch=x86_64 
↑生成centos6的cobbler网络安装源(默认会生成最小化应答文件）
du -sh  /var/www/cobbler/ks_mirror/ 查看生成的cobbler目录
cobbler sync 同步，并且生成default启动菜单
cat /var/lib/tftpboot/pxelinux.cfg/default  查看default是否生成
(修改应答文件：vim /var/lib/cobbler/kickstarts/ks7_mini.cfg
 #url --url=$tree 表示变量，自动用cobbler生成系统代替本地源）

7）新建虚机，关闭桥接，不挂载光盘，网卡启动验证！！

【自己编辑的应答文件应用到cobbler_centos 7上】
sz /var/www/ksdir/mk6_mini.cfg | mk7_mini.cfg 
拷贝应答文件备份到桌面和/root
cp /root/ks{6,7}-mini.cfg  /var/lib/cobbler/kickstarts/
拷贝应答文件到cobbler要求的存放目录
cobbler distro 
cobbler distro  list 发行版本列表
cobbler profile list 对应操作系统的安装方法（启动菜单项）↑
（也可以一个项对应对个不同的启动版本）
cobbler prfile add --name=centos7.5-x86_64_mini  (菜单）
  --distro=Centos-7.5-x86_64 （对应版本） 
  --kickstart=/var/lib/cobbler/kickstarts/ks7-mini.cfg(应答文件）
生成菜单项关联到cnetos安装上
cat /var/lib/tftpboot/pxelinux. cfg/default 验证是否生成菜单项
新建虚机，关闭桥接，不挂载光盘，网卡启动验证！！
（对应编辑centos 6.10应答文件应用 方法同上）↓↓↓
cobbler profile add --name=centos6.10-x86_64_mini --distro=Centos-7.5-x86_64 --kickstart=/var/lib/cobbler/kickstarts/ks7-mini.cfg
ks和OS关联，生成新的启动菜单







cobbler disto  list 或  cobbler profile list 显示菜单列表
cobbler profile remove --name=Centos-6.10-x86_64_mini
删除启动菜单项

更改启动菜单项名称
cobbler profile rename --name=Centos-7.5-x86_64_mini
--newname=Centos-7.5-x86_64_desktop
（↑↑ /var/lib/tftpboot/pxelinux.cfg/default 配置文件）

cobbler profile and --name=centos-7.5-x8
6_64_mini --distro=Centos-7.5-x86_64 -kickstart=/var/lib/cobbler/kickstarts/ks7-mini.cfg
(体现在菜单项  ）
cat /var/lib/stfpboot/centos

cobbler profile report  --name=Centos-7.5-x86_64_mini
显示该系统详细信息

【基于web图像化安装cobbler】▲
yum install cobbler-web
（会生成192.168.34.3/coobbler_web）
用户名：cobbler 密码：cobbler
systemctl reload httpd 重新加载
登录

--认证方式：
认证方法配置文件：/etc/cobbler/modules.conf
支持多种认证方法：
authn_configfile
authn_pam


【管理实现】
--使用authn_configfile模块认证cobbler_web用户▲
vim /etc/cobbler/modules.conf
[authentication]
module=authn_configfile
创建其认证文件/etc/cobbler/users.digest，并添加所需的用户
htdigest -c /etc/cobbler/users.digest Cobbler admin
注意:添加第一个用户时,使用“-c”选项，后续添加其他用户时不要再使用，cobbler_web的realm只能为Cobbler

--使用authn_pam模块认证cobbler_web用户▲
vim /etc/cobbler/modules.conf
[authentication]
module = authn_pam
创建cobbler用户：useradd cobbler
vim /etc/cobbler/users.conf
[admins]
admin = "cobbler“

--Web访问cobbler
重启cobblerd服务
通过https://cobblerserver/cobbler_web访问







【运维自动化软件之ANSIBLE】
集中管理：1对多，适合中小型应用环境，无代理，基于ssh协议加密
支持playbook编排任务，幂等性（不因重复执行带来意外情况；不会拷贝重复资源），yaml格式编任务，不是一个服务，用来控制管理其他主机，执行基本的临时文件（命令集）..


--应用场景
灰度环境（金丝雀）
多台生产服务器，旧版本逐渐替换新版本更新的过程
发布过程：在调度器上下线一批主机(标记为maintanance状态) --> 关闭服务 --> 部署新版本的应用程序 --> 启动服务 --> 在调度器上启用这一批服务器
往往该版本功能变更较大，为了保险起见特意先部分用户（地区）优先体验该功能，待这部分用户使用没有重大问题的时候，再全量发布至所有服务器。
自动化灰度发布：发布平台，脚本

蓝绿发布 ：主、备 两套环境
主：活动， 绿色  v1.0  -->备（非活动）
备：非活动，蓝色 v2.0 -->主（活动）
备用环境离线升级后，切换至主环境，如发生问题，主要环境和备用环境可互相切换

常用自动化运维工具
Ansible:python,Agentless,中小型应用环境
Saltstack:python，一般需部署agent，执行效率更高
Puppet:ruby, 功能强大,配置复杂，重型,适合大型环境
Fabric：python，agentless
Chef: ruby,国内应用少
Cfengine
func


ansible 自动化运维工具
inventory 库存（主机清单）  API 接口
modules 模块   plugins 插件

--ansible 重要组成部分 
控制端 34.3  
被控制端34.6；34.17；34.27


【实验 ansible 管理】 /user/bin/ansibe
ansible playbooks：任务剧本（任务集）
inventory：ansible管理的主机清单 /etc/ansible/hosts
modules：ansible执行明星的功能模块
plugins：模块功能的补充，各类插件（不常用）
API：第三方调用的变成接口
ansible：组合inventory，API，module，plugins等功能模块的核心执行工具（命令工具）

【相关文件】
--配置文件
/etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性
--fock 默认并发数
--poll_interval 拉取间隔（秒）
--sudo_user  远程在对方设备执行的身份 root
--ask_sudo_pass  每次执行ansible命令是否询问ssh密码（默认true）
--ask_pass 是否询问用户账号对应口令 （默认true）
--transport 传输协议smart
--remote__port 远程默认端口22
log_path  = /var/log/ansible.log  (去掉#，启用日志）
host_key_checking = False (去掉#，每次ssh控制登录不提示yes）
module_name = shell (去掉#，默认用shell命令执行）

/etc/ansible/hosts 主机清单
/etc/ansible/roles/ 存放角色的目录
--程序 
/usr/bin/ansible 主程序，临时命令执行工具
/usr/bin/ansible-doc 查看配置文档，模块功能查看工具
/usr/bin/ansible-galaxy 下载/上传优秀代码或Roles模块的官网平台
/usr/bin/ansible-playbook 定制自动化任务，编排剧本工具
/usr/bin/ansible-pull 远程执行命令的工具
/usr/bin/ansible-vault 文件加密工具
/usr/bin/ansible-console 基于Console界面与用户交互的执行工具

--主机清单inventory 【前提条件】将ip纳入被控制端
vim /etc/ansible/hosts
[webs]
192.168.34.6
192.168.34.17
[apps]
192.168.34.[1:2]7

--执行复制公钥脚本（控制不用输入口令）
#!/bin/bash
user=root
ssh-keygen -t rsa -P "" -f /root/.ssh/id_rsa
while read line ;do
ip=`echo $line | awk '{print $1}'`
password=centos                                                                                     
expect <<EOF
set timeout 10
spawn ssh-copy-id -i /root/.ssh/id_rsa.pub $user@$ip
expect {
 "yes/no" { send "yes\n";exp_continue }
 "password" { send "$password\n" }
}
expect eof
EOF
done < iplist.txt

----------------------------------------------------------------------I
第二十六节课 2018年21日  周三
----------------------------------------------------------------------I
【帮助信息】
ansible-doc [options] [module...]
-a 显示所有模块的文档
-l, --list 列出可用模块
-s, --snippet显示指定模块的playbook片段
例：ansible-doc ping 查看ping命令说明

【常用选项】
ansible <主机清单> [-m模块] [-a 参数]
--version 显示版本
-m module 指定模块，默认为command
-v 详细过程 –vv -vvv更详细
--list-hosts 显示主机列表，可简写 --list
-k, --ask-pass 提示输入ssh连接密码，默认Key验证
-K, --ask-become-pass 提示输入sudo时的口令
-C, --check 检查，并不执行
-T, --timeout=TIMEOUT 执行命令的超时时间，默认10s
-u, --user=REMOTE_U SER 执行远程执行的用户
-a  后面要执行的命令
-b, --become 代替旧版的sudo 切换
--become-user=USERNAME 指定sudo的runas用户，默认为root

*   通配符
： 或
"：&"  与 （要加双引号引起来）
'：！'   非  （要加单引号引起来）
'a:b:&c:!d' 综合逻辑（显示a b组，并且在c组的成员，但排除d组）
":~(a|b).*\.magedu\.com" 正则表达式

--执行命令过程
1）加载自己配置文件/etc/ansible/ansible.cfg
2）加载对应模块
3）生成临时python文件，将文件传输至远程服务器，对应执行用户家目录$home/.ansible/tmp/ansible-tmp-xx/xx/PY文件
4）给文件+x执行
5） 执行并返回结果
6） 删除临时py文件，sleep 0退出
--颜色定义
绿色：ok  黄色：ok，对方状态已变更  红色：不可达/错误/删除

--例：
ansible 192.168.34.6  -m ping -k  -u wang -k -b -K
使用ping模块，提示输入口令，以wang用户登录，并sudo以root身份执行该命令，且提示输入sudo的口令
ansible  "*"  -m ping -vv  对所有成员，使用ping命令，并显示详情
ansible apps  --list-hosts  显示apps清单中所有的主机列表
ansible apps:webs  --list-hosts 显示apps或webs组中的主机列表
ansible "apps:&webs"  --list-hosts 显示apps与webs组的主机列表

【ansible常用模块】
Command：在远程主机上执行linux命令
（系统默认模块 -m ** 可省略不写）
例：
ansible srvs -m command -a ‘service vsftpd start’
servs主机列表，默认以root身份，启用vsftpd服务
（此命令不支持$ < > | ; &等，需用shell模块实，但shell支持）

Shell：和comman的类似，用，用shell执行命令
ansible srv -m shell -a ‘echo magedu |passwd –stdin wang’
sev主机列表，默认以root身份，执行shell命令，更改wang口令
ansible all -m shell -a ''chdir=/data rm -rf *'
执行命令前先切换/data文件夹，然后再删除所有文件。
chdir=xx：执行命令前先切换该文件夹

Script： 在远程主机上运行ansible服务器上的脚本
例：vim f1.sh  
ansible all -m script -a "/data/fi.sh"
所有列表主机上执行f1.sh脚本
ansible 192.168.34.6  -a "removes=/etc/fstab rm -f /data/f1"
当34.6存在/etc/fstab，则删除f1文件
creates：如对方主机该文件存在，将不执行命令
removes：如对方主机该文件存在，将执行命令

Copy：从服务器复制文件到客户端
例：
ansible all -m copy -a "arc=/etc/issue dest=/root/fstab owner=nobody mode=600 backup=yes" 
复制本地文件到目标主机，更改目标所有者及权限，修改前备份。
ansible srv -m copy -a “content="content[test]\nbaseurl=file:///mnt\ngpgcheck=0" dest=/etc/yum.repos.d/test.repo' 
复制content里内容（本地yum仓库信息）生成到目标test.repo
--------------------------
src：源     dest：目的（必须是文件夹） 
content：远程生成文件，把内容制定好
mode：权限   backup：如目标已存在文件，先备份再做更改
owner：所有者   group：所属组  
--------------------------

Fetch：从客户端复制文件至服务器端，copy相反，目录可先tar打包
（只支持文件不支持抓取目录）
例：ansible all -m fetch -a 'tar cf /etc/hosts  /data'
所有成员，将目标主机hosts目录打包并抓取到本地/data目录

File：设置文件属性 
例： 
state=directory属性为文件夹
ansible all -m file -a 'path=/data/file.txt  state=absent'
所有成员，指定路径，并删除file.txt文件
ansible all -m file -a 'src=/data/fstab path=/data/fstab.link state=link'
所有成员，针对本地/data/fstab文件，在/data/下创建软链接
------
state={touch创建空文件；link创建软链接文件；hard硬链接； absent删除 ；present存在；directroy创建文件夹}
arc；dest=path=name 同义词（指定目标路径）；

hostanme 更改主机名
ansible 192.168.34.7 -m hostname -a 'name=centos7' 
改某IP主机名为centos7
（更改只在/etc/hostname 生效；建议/etc/hosts也添加新主机名）

Cron：计划任务（并且给计划任务起名）
ansible all -m cron -a 'minute=*/5，weekday=0,6 job="/usr/sbin/ntpdate 172.18.0.1 & >/dev/null" 
name=synctime'
所有成员 每5分钟,周六周日 同步172.18.0.1服务器的时间
ansible all -a crontab -l'  查看所有任务
-----
disabled=true   禁用该任务
disabled=false   启用该任务
state=absent  清除该任务
name=xx 体现注释行，起名
name=xx state=absent 可以直接删除备注该名称的任务  

Yum 管理包  指定安装和卸载包的名称，*：升级  
absent、remove:删除
ansible all  -m  yum -a 'name =dstat'
所有成员安装dstat包
ansible all  -m  yum -a 'name=httpd vsftpd memcached'
所有成员安装多个包
ansible all  -m  yum -a 'name=httpd,vsftpd state=absent’
所有成员，指定yum模块，删除httpd,vsftpd包
ansible all  -m  yum -a 'name=dstat update_cache=yes'
所有成员，安装dstat包，并更新缓存

servece：管理服务
ansible all  -m service -a 'name=httpd state=started'
所有成员，指定service命令，启动80端口，以及httpd服务
（enabled=yes）
(不支持对多个服务同时启动）
-----
chkconfig  httpd  on  开启启动服务centos6 
systemctl  is-enabled statup 开机启动服务centos7
stoped；started；enabled；reloaded；restarted


User：管理用户 （useradd）
ansible all -m user -a  'name=test comment="test user"
uid=2000  home=/data/testhome group=root groups=bin,nobody shell=/sbin/nologin'
所有成员，创建test用户，描述为test user，指定uid/home/group
/groups附加组/shell等相关信息 
ansible all -m user -a 'name =test state=absent ’ 
所有成员，删除test用户
ansible all -m user -a 'name =test state=absent  remove=absent'
所有成员，删除test用户，并且删除该用户的家目录
-----
comment：描述 create_home：创建家目录  append：加用户到组
expires：加密时长  remove：可删除家目录 system：系统用户


Group：管理组   （groupmod）
ansible srv -m group -a "name=testgroup system=yes"
创建testgroup系统组
ansible srv -m group -a "name=testgroup state=absent"
删除testgroup系统组
[centos 6：500以内；centos 7 ：1000以内]

【ansible系列命令】
https://galaxy.ansible.com  （下载路径：/root/.ansible/roles/）
roles：多个脚本组合成的角色
ansible-galaxy list 查看相关列表 
ansible-galaxy install geerlingguy.redis 从下载
ansible-galaxy remeove geerlingguy.redis 删除（rm可以删除）

ansible-pull  把命令推送至远程，基于ssh key验证
（500以下，以上效率偏低，不能装代理）

ansible-playbook  xx 执行脚本（剧本）
范例：vim hello.yml   
#hello world yml file
-   hosts: websrvs
     remote_user: root
     taskk:
        - name: hello word
           command: /usr/bin/wall   hello world

-- ansible-vault  ：管理加密解密yml文件
ansible-vault encrypt hello.yml 加密，输入口令（AES256位加密）
ansible-vault decrypt hello.yml  解密，输入口令
ansible-vault view hello.yml  只查看不打开
ansible-vault edit hello.yml  编辑
ansible-vault rekey hello.yml 更改口令
ansible-vault create hello.yml  直接创建加密文件

-- Ansible-console  可交互执行命令，支持tab
root@all  (3)  [f:5]
以root身份登录  所有组  共3台主机  并发能执行5个进程
root@all  (3)  [f:5]
	forks 10  并发数改成10
	cd webs  切换到webs组的主机执行命令
	list 查看该组成员
	file dest=/data/ansible.txt state=touch
	指定目录，创建ansible.txt文件
	shell  ls  /data 查看该目录文件

--yaml介绍
是一门中立语言，可以被多种应用来使用，ansible可以调用该语言
是一个特殊格式的文本文件

--YAML语法简介
--- 或 ...  ：表示yaml文档的开始/结束；# ：注释 
缩进必须统一的，不能空格和tab混用
缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的（通常两个空格一个缩进）
YAML文件内容是区别大小写的，k/v的值大小写敏感
k/v的值可同行写也可换行写。同行使用：分隔
v可是个字符串，也可是另一个列表 [ xxx ]
一个完整的代码块功能所需最少元素需包括 name名称: task任务（执行的模块）
一个name只能包括一个task，一个task可以调用多个模块
YAML文件扩展名通常为yml或yaml （同样为yml后缀）
语法：序列 - - -   ； 键值对 aa:bb cc:dd

Dictionary：字典，通常由多个key与value构成（键值对）
例：
# An employee record
name: Example Developer
job: Developer
例：
# An employee record
{name: Example Developer, job: Developer, skill: Elite}


-- playbook核心元素
Hosts 执行的远程主机列表
Tasks 任务集
Varniables 内置变量或自定义变量在playbook中调用
Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件
Handlers(触发) 和notify(通知)结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行
tags 标签ansible具有幂等性，因此会自动跳过没有变化的部分
ansible-playbook –t tagsname useradd.yml

--playbook基础组件
hosts：指定要执行指定任务的主机，必须定义主机清单中
remote_user：用于host和task中，以什么用户身份远程连接
task：任务列表，各任务按次序逐个name完成

- name: run this conmand and ignore the result
   shell: /usr/bin/somecmd || /bin/true  错误码转为真
   shell: /usr/bin/somecmd 
   ignore_errors: True  忽略错误


ansible-playbook  xx.yml
	 -C --check 检查语法错误
	--list-hosts  显示可执行主机列表
	--list-tasks  显示可执行任务列表
	--limit 192.168.34.27  限定特定主机执行（27执行）
	-v -vv -vvv显示执行过程

ansible all -m yum -a 'name=httpd state=absent'

例：
--ansible-playbook  
vim install_httpd.yml
需求
1）useradd apache -g apache -u 80 -s /sbin/nologin
	-d /usr/share /httpd  -r
2）yun install httpd
3 )scp httpd.conf  IP:/etc/httpd/conf/
4）systemctl httpd start
     systemctl  enable httpd


SHELL脚本
#!/bin/bash
# 安装Apache
yum install --quiet -y httpd
# 复制配置文件
cp /tmp/httpd.conf /etc/httpd/conf/httpd.conf
cp/tmp/vhosts.conf /etc/httpd/conf.d/
# 启动Apache，并设置开机启动
service httpd start
chkconfig httpd on

python -c  'import crypt,getpasswd;pw="centos";print(crypt.crypt(pw))'  生成centos的sha512位加密

Playbook定义
---
- hosts: all
tasks:
- name: "安装Apache"
yum: name=httpd
- name: "复制配置文件"
copy: src=/tmp/httpd.conf dest=/etc/httpd/conf/
- name: "复制配置文件"
copy: src=/tmp/vhosts.conf dest=/etc/httpd/conf.cd/
- name: "启动Apache，并设置开机启动"
service: name=httpd state=started enabled=yes

tasks 主动运行
notefy 条件
hanlers 触发，被动运行（跟task对齐）
tags(关键字/单词)  可以挑选性的执行任务列表对应的任务（标签） 
      -t xx 指定标签 一个动作可以有多个标签 
      一个 name可跟多个标签（xx，xx）
例：ansible-playbook –t conf httpd.yml

--setup
ansible all -m setup(模块)   显示系统中对应主机的各种信息
ansible all -m setup -a  "filter=ansible_memtotal_mb"   
过滤，查看总内存大小
键值对：k/v

【Playbook中变量使用】
变量名：仅能由字母、数字和下划线组成，且只能以字母开头
1 ansible setup facts 远程主机的所有变量都可直接 调用
2 在/etc/ansible/hosts中定义（变量赋值）
普通变量：主机组中主机单独定义，优先级高于公共变量
ip  nodename=centos7_1  
ip  nodename=centos7_2
公共（组）变量：针对主机组中所有主机定义统一变量
[appservs:vars]
suffix=magedu.com
-----------------
{{ nodename }}.{{ suffix }}
变量为  centos7_1.magedu.com
            centos7_2.magedu.com

3 通过命令行指定变量，优先级最高▲
ansible-playbook –e varname=value   xx.yml
{{  varname }} = value
ansible-playbook –e "varname=value  varname2=bac"  xx.yml
（最好不用name做变量名，保留字段）
4 在playbook中定义
vars:
  - var1: value1
  - var2: value2
5 在独立的变量YAML文件中定义(引用文件变量)
vim var.yml  
name1 : httpd
name2 : tftp
ansible-playbook  test.yml
- hosts: apps
   remote_user: root
   vars_files:
     - vars.yml 
   task:
     - name: install package
       yum: name={{ name1 }}
     - name: service
        service: name={{ name2 }} state=started enabled=yes
6 在role中定义
roles/
    mysql/
    httpd/
    nginx/
- include : a.yml
- include : b.yml
- include : c.yml

--变量调用方式：
通过{{ variable_name }} 调用变量，且变量名前后必须有空格，有时用“{{ variable_name }}”才生效
--变量优先级 (-e > playboook >  普通变量 > 公共变量)
▲离我最近的变量，优先生效

【模板templates】
文本文件，嵌套有脚本（使用模板编程语言编写）
Jinja2语言，使用字面量，有下面形式
  字符串：使用单引号或双引号
  数字：整数，浮点数
  列表：[item1, item2, ...]
  元组：(item1, item2, ...) 定义完内容不能变化
  字典：{key1:value1, key2:value2, ...} key1=value1
布尔型：true/false
算术运算：+, -, *, /, //（余数去掉，取整）, %, **
比较操作：==, !=, >, >=, <, <=
逻辑运算：and, or, not
流表达式：For  If   When（当某个条件满足）

Nginx分ipv6 | ipv4 端口   httpd 不分

--templates 模板 (只能用于playbook，不能写入ansible命令行)
tasks:
  - name: template config to remote hosts
     template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
ansible-playbook temnginx.yml
同步nginx.conf文件

--when  条件判断（当）
条件测试，在task中使用，支持jinja2的语法格式
tasks:
  - name: install conf file to centos7
     template: src=nginx.conf.c7.j2 dest=/etc/nginx/nginx.conf
     when: ansible_distribution_major_version == "7"
  - name: install conf file to centos6
     template: src=nginx.conf.c6.j2 dest=/etc/nginx/nginx.conf
     when: ansible_distribution_major_version == "6"
分开执行；如果版本为7，则复制同步，如果版本为6，则复制同步。
--------------------------------------
ansible all -m setup(模块)   显示系统中对应主机的各种信息▲
ansible_processor count  cpu数量
ansible_nodename     主机名
ansible_memory_mb    可用内存
ansible_memtotal_mb  总内存大小
distribution_major_version  版本号

--迭代：whith_items
在task中使用with_items给定要迭代的元素列表
当有需要重复性执行的任务时，可以使用迭代机制
对迭代项的引用，固定变量名为"item"
列表写法：↓
- hosts: apps
   remote_user: root
     task：
       - name: copy files
          copy: src{{items}} dest=/data/ mode=600
      whith_items
        - test1
        - test2
        - test3
复制3个文件到每个远程主机的/data目录，并设置权限

嵌套字典写法：↓
- hosts: apps
   remote_user: root

  tasks:
    - name: add some groups
  group: name={{ item }} state=present
  with_items:
    - group1
    - group2
    - group3
    - name: add some users
  user: name={{ item.name }} group={{ item.group }}   state=present
  with_items:
    - { name: 'user1', group: 'group1' }
    - { name: 'user2', group: 'group2' }
    - { name: 'user3', group: 'group3' }
创建以下组合用户，迭代结合嵌套 子变量
user1，group1
user2，group2
user3，group3
---------------------------
test2.yml
     task：
       - name: install package
          yum: name={{ name }}
       - name: service
          tage: service
          service: name={{ name }} state=started enabled=yes
ansible-playbook -e name=vsftpd test2.yml
在命令行引用变量，分别对yum名称和service名称赋值引用。

--for if 循环 （引用Playbook中template）
成对出现
vim /template/test_for.conf.j2
{% for p in xx %}  p：变量值  xx：列表名
server{ listen {{p}}
}
{% endfor %}  结束符  
vim test_for.conf
vars:
   prots:
      - 81
      - 82
      - 83

    tasks:
      - name: template
      - template: src=test_for.conf.j2  dest=/data/test_for.conf
引用test_for.conf,实现3个端口的变量赋值到对象主机test_for.conf
-------------------------------


vim  template/xx.j2
{% if i.host_name in defined %}
	server_name {{i.host_name}}
{% endif %}  
如果host_name语句被定义，
就启用这行server_name {{i.host_name}}，没定义就不启用
----------------------------------------
conf  最终生成的文件
yml 执行文件(变量定义)
j2   模板引用文件(for循环)
ansible-playbook xx.yml
执行xx.yml，并引用/template/xx.j2模板，然后生成conf到路径▲

-- roles 角色
层次性、结构化地组织playbook
适合于复杂场景，一大堆剧本文件的集合，相互之间可以调用
角色(roles)：角色集合
roles/
mysql/
httpd/
nginx/
memcached/
playbook/roles目录和playbook/xx.yml 是平级的关系

playbook xx.yml aa.yml...
 roles:
   /httpd:  服务
      /tasks/xx.yml  调用执行的命令
      /files/xx.yml   要调用的文件
     /vars/xx.yml    调用变量
     ....
   /nginx:  服务
      /tasks/aa.yml bb.yml cc.yml main.yml...  data.yml(copy数据)
      /files/xx.yml
     /vars/xx.yml 
     /templates/xx.j2
--实验
yum install memcached   (ansiable playbook目录)
vim httpd/tasks/group.yml  创建组
- name: create group
  group: name=apache system=yes gid=80
vim httpd/tasks/group.yml  创建用户
- name: create user
  user: name=apache group=apachi uid=80 shell=/sbin/nolgoin
          home=/usr/share/httpd  system=yes
vim httpd/tasks/install.yml  安装包
- name: install package
  yum: name=httpd
vim httpd/tasks/config.yml  复制配置文件
- name: config file
  copy: src=/root/playbook/httpd.conf dest=/etc/httpd/conf/
           backup=yes
vim httpd/tasks/service.yml  启服务
- name: service
  service: name=httpd state=started enabled=yes
vim httpd/tasks/main.yml  程序总入口（定义执行顺序）
- include: group.yml
- include: user.yml
- include: install.yml
- include: config.yml
- include: serveceyml
cp /etc/httpd/conf/httpd/conf  files/httpd/files/
vim /httpd/files/httpd.conf
#listen  9527  端口改成9527
-----
roles:
   /files
      /httpd.conf 配置文件
   /tasks
      /config.yml      /main.yml
      /group.yml      /service.yml
      /install/yml     /user.yml
vim /~/palybook/http_role.yml
- hosts: apps
   remote_user: root   
   roles:
      - role: httpd  (会自动关联role下相应的角色的yml文件)
-----
ansible-playbook -C httpd_role.yml1 检查
ansible-playbook  httpd_role.yml   执行！！
ansible all -a ‘ss -tnl’ 查看9527端口是否打开
---------------------------------------------------------
跨区调用
/playbook/roles/httpd/files/index.html
/playbook/roles/nginx/files/index.html

cp -r roles/httpd/index.html  /roles/nginx
vim roles/httpd/files/index.html
<hi>welcome to magedu!</hi>

vim /httpd/tasks/data.yml
- name: data file
   cppy: src=index.html dest=/var/www/html/ 

vim  httpd/tasks/main.yml  添加data.yml
vim xx.yml
- hosts: apps
   remote_user: root
   roles:
      - role: nginx
      
▲最要执行 .yml 必须和roles平级，才能调用roles下的文件

----------------------------------------------------------------------I
第二十六节课 2018年23日  周五
----------------------------------------------------------------------I

【DNS服务和BIND】
linux：/etc/hosts  名字解析 (地址 域名) C/S,53/udp, 53/tcp
NIS：网络信息服务
FQDN:全称域名（同时带有主机名和域名的名称，用点隔开）

/etc/hosts  分散式解析
NIS：网络信息服务器，固定服务器做域名解析，集中式解决方案
受性能局限，只是用于中小规模网络  集中式解析
DNS:       分布式解析

本地名称解析配置文件：
linux:/etc/hosts
 win: C:\Windows\System32\drivers\etc\hosts
例：firefox
       vim /etc/host
     101.200.188.230 www.baidu.com 
     输入网址可定向到别的网站

正向解析：域名解析IP   
反向解析：IP解析域名


--DNS 域名 （分层结构）分布式解析
根域 .
一级域名：
com, edu, mil, gov, net, org, int,arpa
三类：组织域、国家域(.cn, .ca, .hk, .tw)、反向域
二级域名
三级域名
最多127级域名
每级域服务器，存放下级域的对应关系
上级域知道下级域名的对应关系，下级不知道上级，根域除外
dns解析服务器可缓存，电脑可缓存；利用缓存技术提高访问速度

--递归查询：询问完后直接给结果，负责到底
（dns服务器直接去问到最终地址，然后返回正确IP地址）
--迭代查询：不直接给结果
（从跟域到顶级域再到二级域最终查询正确IP地址）
腾讯dns 119.29.29.29 广州
百度dns 180.76.76.76 北京
阿里dns  223.5.5.5 223.6.6.6  杭州

yum install whois
whois magedu.com  查询该域名信息
dig；host；nslookup  专业测试dns服务器工具

cat /etc/resolv.conf  查看本地dns地址
/etc/named.conf  DNS 配置
 #listen-on port 53 { localhost } 把dns指向自己的地址，然后注释
默认监听本机左右端口，注释默认允许所有
named-checkconf  检查配置文件

   存放根服务器（hint跟服务器特殊类型）
type hint :  跟服务器特殊类型
dig -t ns magedu.com   查询主机对应的dns服务器
dig www.magedu.com @106.11.141.115
使用指定dns服务器解析地址

--bind    systemctl start named   启用dns服务
/etc/named.conf  主配置文件
/usr/sbin/named  服务器程序
/var/named 数据库（存放名字和IP对应关系）
/var/log/name.log 日志


--7自建dns服务，使centos6可解析dns服务，但不能上网
（只提供基本 缓存功能，代理dns查询）
yum install bind -y
vim ens37 ; 添加DNS1=127.0.0.1  (外网网卡)▲
systemctl restart network 重启网络服务
vim /etc/named.conf 
##listen-on port 53 {   xx  }
↑ 注释或localhost默认所有本地ip开启监控
##allow-query {  xx  } 允许哪些地址可以查DNS服务
↑ 注释或any默认允许所有
named-checkconf 检查↑配置是否错误
systemctl restart named或rndc reload 重启DNS服务
6：修改ifg-eth0，添加DNS1=192.168.34.7，DNS指向7
6：dig  www.baidu.com 测试


-- 查询权威服务器
dig -t ns baidu.com  获取解析域名的主机名称
ping  ns3.baidu.com.  ping得到域名主机名称得到ip地址
dig www.magedu.com @106.11.141.115 指定地址解析域名
#flags: qr aa rd 若中间是aa；表示权威服务器

include "/etc/named.rfc1912.zones" 存放域信息专用（数据库）
--添加并配置magedu域
vim /etc/named.rfc1912.zones ；保存至/var/named
#zone  "magedu.com" {
                 type master;  (表示主DNS服务器)
                 file "magedu.com.zone"; (存放magedu数据库的文件名)
	 
};
cp -p named.localhost magedu.com.zone  拷贝数据库模板
cd /var/named
vim /var/named/magedu.com.zone
#www     A       6.6.6.6
#blog.magedu.com.  A  7.7.7.7
named-checkzone magedu.con  /var/named/magedu.com.zone
检查magedu.com数据库格式
rndc reload  重新加载dns生效
6：dig www.magedu.com

--资源记录格式： （rr Resource Record）
语法：name  [TTL]  IN  rr_type   value
名称（fqdn）  缓存时长记录  Internet记录 资源类型记录   值(ip)

生命期（默认1天）   生命期，internet记录 默认向上继承不用写

--资源记录选项 （@ 本域，如 表示magedu.com.）.  代表@
A：把名称解析成ip
AAAA：把名称解析成ipv6地址
SOA：起始授权记录，记录当前区域数据，必要的基本信息（唯一）
PTR：ip解析成名称
NS：本域服务器域名；如dns1，配合记录解析成ip
#dig -t ns magedu.com 查dns服务器地址
MX：邮件记录；格式 @ MX  10 mailserv1 ；数字越小越优先 
#dig -t mx magedu.com 查邮件服务器地址
TXT：对域名进行标识和说明的一种方式，一般做验证记录时会使用此项，如：SPF（反垃圾邮件）记录，https验证等
示例：_dnsauth TXT 2012011200000051qgs69bwoh4h6nht4n1h0lr038x

例：
www  CNAME websrv
websrv A       6.6.6.6
websrv A       7.7.7.7
websrv A       8.8.8.8
rndc reload
CNAME：别名记录  （通常为利用cdn加速）
 
三大项 ：
主DNS服务器名称  DNS1  或 DNS1.magedu.com.
DNS服务器管理员邮箱 admin.magedu.com.
主从架构，同步策略  { 
0   ；  serial    主DNS版本号比从DNS版本号大，触发同步
1D ； refresh  刷新时间
1H ； retry      重试时间 
1W ； expire   过期时间
3H ； minimum   否定dns记录的缓存时长   }
两种同步方式：push：主DNS推 | pull 从DNS周期性拉 
#named-checonf  ;  namged-checkzone  检查格式
#systemc -l status  named  检查服务状态
#named-checkzone 34.168.192.in-addr.arpa 192.168.34.zone
检查区域数据库  【域名： 数据库文件】

--反向解析
vim /etc/named.rfc1912.zones
$TTL  86400
@  IN  SOA  dnsserver  admin.magedu.com.    ( 20181121  3H  10M  1D  1H )                          
        NS  dnsserver
dnsserver  A   192.168.34.7
7         PTR  dnsserver.magedu.com.
100       PTR  www.magedu.com.
200       PTR  blog.magedu.com.
6：dig -x  192.168.34.100  验证



dig -t axfr magedu.com @192.168.34.7
显示域名服务器相关信息