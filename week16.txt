第四十五节课 2019年1月7日  周一
--------------------------------------------------------------------------I

【Nginx】

fastcgi
● 静态：images,css,js,..
	用户发请求给服务器，服务器分析请求类型，从磁盘IO取出相应文件进行响应
● 动态：php，css，js，drain被动/超时/主动排干：等用户请求服务断开
	用户发请求给服务器，服务器分析请求类型，基于cgi或fastcgi向后端代理，
	或者说作为客户端向相应服务模块请求服务
工作的协议层次：4层->转发/交换 ; 7层->代理

● 数据
  结构化数据：MySQL ...
  半结构化数据：JSON,XML,KV，..
  非结构化数据：分布式存储（SDS）-分布式文件系统-分布式对象存储-分布式块存储
				
Nginx特性：静态web服务器，反向代理服务器，负载均衡，伪四层调度，
           邮件协议反向代理服务器..

C10K:
  进程模型：一个子进程处理一个请求；Prefork，LWP轻量级进程
	select(),poll(),最多并发1024个
  线程模型：一个子进程生成多个线程，每个线程处理一个请求；worker
  事件驱动模型：一个进程能同时基于内部的回调机制处理多个请求，实现一个进程同时处理多路请求
                每次调用服务时，内核会留一个回调接口，哪路请求处理好了，就从哪路回调请求
				一个CPU起一个进程


IO 	进程访问数据的请求过程：同步IO，异步IO，阻塞IO，非阻塞IO
	第一阶段：进程-->内核
	第二阶段：内核-->磁盘
	
	AIO 异步IO
	mmap 内存映射，请求相应优化，内核的回应直接发送到给用户

Nginx管理三个核心：事件驱动、异步、非阻塞
Nginx功能：
	Web Server/虚机主机
	Proxy Server：httpd、smtp、pop3/imap4
	Stream Server：模块化四层代理服务器
	
	配置端：global、http{server{}；}
	Nginx:次版本号偶数-稳定版
	
--Master主进程主要功能：
生成子进程、重载配置文件、启动或销毁进程、平滑升级
子进程不侦听端口，只接受用户请求

■ 性能优化配置相关：
1、worker_processes number | auto 
worker进程的数量
auto：当前主机物理CPU核心数
2、worker_cpu_affinity coumask ...；
worker_cpu-affinity auto [cpumask];
nginx进程的cpu亲缘性
CPU MASK：bit mask
00000000：
0000 0001：0号CPU
0000 0010：1号CPU
0000 0100：2号CPU
3、worker_priority number; 默认120
指定worker进程的nice值，设定worker进程优先级[-20,20]
4、worker_rlimit_nofile number;
worker进程所能够打开的文件数量上限，默认1024

■ 事件驱动相关的配置:
events {
...}
1、worker_connections number;
每个worker进程所能够打开的最大并发连接数数量；
worker_processes * worker_connections
						
2、use method;
指明并发连接请求的处理方法；
use epoll; 事件驱动模型[默认]
							
3、accept_mutex on | off;
处理新的连接请求的方法；on意味着由各worker轮流处理新请求，
Off意味着每个新请求的到达都会通知所有的worker进程；

■ 调试、定位问题：
1、daemon on|off;	
是否以守护进程方式运行Nignx；
						
2、master_process on|off;
是否以master/worker模型运行nginx；默认为on；
						
3、error_log file [level];
错误日志，日志级别

主配置文件：/etc/nginx/nginx.conf
nginx -s reload 重载配置文件

■ 与套接字相关的配置：
1、server { ... }
													
server {
listen address[:PORT]|PORT;
server_name SERVER_NAME;
root /PATH/TO/DOCUMENT_ROOT;							
}
						
2、listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE
listen address[:port] [default_server] [ssl] [http2 | spdy]  [backlog=number] [rcvbuf=size] [sndbuf=size]
						
default_server：设定为默认虚拟主机；
ssl：限制仅能够通过ssl连接提供服务；
backlog=number：后援队列长度；
rcvbuf=size：接收缓冲区大小；
sndbuf=size：发送缓冲区大小；
						
3、server_name name ...;
指明虚拟主机的主机名称；后可跟多个由空白字符分隔的字符串；
支持*通配任意长度的任意字符；server_name *.magedu.com  www.magedu.*
支持~起始的字符做正则表达式模式匹配；server_name ~^www\d+\.magedu\.com$
							
匹配机制：
(1) 首先是字符串精确匹配;
(2) 左侧*通配符；
(3) 右侧*通配符；
(4) 正则表达式；
						
练习：定义四个虚拟主机，混合使用三种类型的虚拟主机；
仅开放给来自于本地网络中的主机访问；
						
4、tcp_nodelay on | off;
在keepalived模式下的连接是否启用TCP_NODELAY选项；长连接建议启用
						
tcp_nopush on|off;
在sendfile模式下，是否启用TCP_CORK选项；
						
5、sendfile on | off;
是否启用sendfile功能；

■ 定义路径相关的配置：  
6、root path; 
设置web资源路径映射；用于指明用户请求的url所对应的本地文件系统上的文档所在目录路径；可用的位置：http, server, location, if in location；
						
7、location [ = | ~ | ~* | ^~ ] uri { ... }
Sets configuration depending on a request URI. 
						
在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置；
						
=：对URI做精确匹配；例如, http://www.magedu.com/, http://www.magedu.com/index.html
location  =  / {
...
}
~：对URI做正则表达式模式匹配，区分字符大小写；
~*：对URI做正则表达式模式匹配，不区分字符大小写；
^~：对URI的左半部分做匹配检查，不区分字符大小写；
不带符号：以URI为前缀的所有uri；以上全都匹配
						
匹配优先级：=, ^~, ～/～*，不带符号；
						
root /vhosts/www/htdocs/
http://www.magedu.com/index.html --> /vhosts/www/htdocs/index.html
							
server {
root  /vhosts/www/htdocs/
location /admin/ {
	root /webapps/app1/data/
				 }
		}

8、alias path;
定义路径别名，文档映射的另一种机制；仅能用于location上下文；
						
注意：location中使用root指令和alias指令的意义不同；
(a) root，给定的路径对应于location中的/uri/左侧的/；
(b) alias，给定的路径对应于location中的/uri/右侧的/；
							
9、index file ...;
默认资源；http, server, location；
						
10、error_page code ... [=[response]] uri;
Defines the URI that will be shown for the specified errors. 
						
error_page 404 /404.html;
location = /404.html {
	root "/www/error_pages";
				}						
						
11、try_files file ... uri;
定义客户端请求的相关配置
				
12、keepalive_timeout timeout [header_timeout];
设定保持连接的超时时长，0表示禁止长连接；默认为75s；
						
13、keepalive_requests number;
在一次长连接上所允许请求的资源的最大数量，默认为100; 
						
14、keepalive_disable none | browser ...;
对哪种浏览器禁用长连接；
						
15、send_timeout time;
向客户端发送响应报文的超时时长，此处，是指两次写操作之间的间隔时长；
						
16、client_body_buffer_size size;
用于接收客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置；
						
17、client_body_temp_path path [level1 [level2 [level3]]];
设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量；
						
16进制的数字；
client_body_temp_path   /var/tmp/client_body  1 2 2
1：表示用一位16进制数字表示一级子目录；0-f
2：表示用2位16进程数字表示二级子目录：00-ff
2：表示用2位16进程数字表示三级子目录：00-ff
							
■ 对客户端进行限制的相关配置：
18、limit_rate rate;
限制响应给客户端的传输速率，单位是bytes/second，0表示无限制；
						
19、limit_except method ... { ... }
限制对指定的请求方法之外的其它方法的使用客户端；
						
	limit_except GET {
		allow 192.168.1.0/24;
		deny  all;
					}

■ 文件操作优化的配置
20、aio on | off | threads[=pool];
是否启用aio功能； 异步IO
						
21、directio size | off;
在Linux主机启用O_DIRECT标记，此处意味文件大于等于给定的大小时使用，例如directio 4m;
						
22、open_file_cache off; 网页页面资源文件做缓存
open_file_cache max=N [inactive=time];
nginx可以缓存以下三种信息：
(1) 文件的描述符、文件大小和最近一次的修改时间；
(2) 打开的目录结构；

max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现缓存管理；
							
inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项；
							
23、open_file_cache_valid time;
缓存项有效性的检查频率；默认为60s; 
						
24、open_file_cache_min_uses number;
在open_file_cache指令的inactive参数指定的时长内，至少应该被命中多少次方可被归类为活动项；
						
25、open_file_cache_errors on | off;
是否缓存查找时发生错误的文件一类的信息；
						
ngx_http_access_module模块：
实现基于ip的访问控制功能
					
26、allow address | CIDR | unix: | all;
27、deny address | CIDR | unix: | all;
					
http, server, location, limit_except
						
ngx_http_auth_basic_module模块
实现基于用户的访问控制，使用basic机制进行用户认证；
					
28、auth_basic string | off;
29、auth_basic_user_file file;
					
location /admin/ {
	alias /webapps/app1/data/;
	auth_basic "Admin Area";   认证注释
	auth_basic_user_file /etc/nginx/.ngxpasswd; 指定账号密码文件
		}
注意：htpasswd命令由httpd-tools所提供；
	
htpasswd -c -m /etc/nginx/.ngxpasswd tom 创建账号文件及tom用户+口令
htpasswd -b -m /etc/nginx/.ngxpasswd ilinux ilinux 最佳创建账户口令
	
ngx_http_stub_status_module模块
用于输出nginx的基本状态信息；
server {
location= /ngx_status{
stub_status; 显示nginx状态信息								
}	}							
Active connections: 291 
erver accepts handled requests
		16630948 16630948 31070465 
Reading: 6 Writing: 179 Waiting: 106 	
					
Active connections: 活动状态的连接数；
accepts：已经接受的客户端请求的总数；
handled：已经处理完成的客户端请求的总数；
requests：客户端发来的总的请求数；
Reading：处于读取客户端请求报文首部的连接的连接数；
Writing：处于向客户端发送响应报文过程中的连接数；
Waiting：处于等待客户端发出请求的空闲连接数；
					
30、stub_status;
					
配置示例：
location  /ngx_status {
	stub_status;
	}
						
ngx_http_log_module模块
he ngx_http_log_module module writes request logs in the specified format.
					
31、log_format name string ...;
string可以使用nginx核心模块及其它模块内嵌的变量；
						
	课外作业：
        1、为nginx定义使用类似于httpd的combined格式的访问日志；
        2、把combined格式的日志输出为json格式；

32、access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
access_log off;
						
访问日志文件路径，格式及相关的缓冲的配置；
	buffer=size
	flush=time
							
33、open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];
open_log_file_cache off;
缓存各日志文件相关的元数据信息；
							
max：缓存的最大文件描述符数量；
min_uses：在inactive指定的时长内访问大于等于此值方可被当作活动项；
inactive：非活动时长；
valid：验正缓存中各缓存项是否为活动项的时间间隔；


--配置SSL:
openssl genrsa 2048 > nginx.key  生成私钥
openssl genrsa -out nginx.key 2048  生成私钥
openssl req -new -x509 -key nginx.key -out nginx.crt -days 3650 -subj 
"/CN=www.ilinux.io"  基于私钥生成证书

    server {
        listen              443 ssl;
        keepalive_timeout   70;   保持连接时间

        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
        ssl_certificate     /usr/local/nginx/conf/cert.pem;
        ssl_certificate_key /usr/local/nginx/conf/cert.key;
        ssl_session_cache   shared:SSL:10m;  缓存空间大小 10M
        ssl_session_timeout 10m;   超时时间10M
		location / {
			root "/web/nginx/html"; 
		}
    }
nginx -s reload
测试 https://192.168.34.17


--rewrite  URL重写:
#将用户请求的URI基于regex所描述的模式进行检查，而后完成替换

1、rewrite regex replacement [flag]
将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为replacement指定的新的URI；
				
注意：如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查，因此，隐含有循环机制；[flag]所表示的标志位用于控制此循环机制；
				
如果replacement是以http://或https://开头，则替换结果会直接以重向返回给客户端；
301：永久重定向；
					
[flag]：
	last：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环； 
	break：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环；
	redirect：重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；
	permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；
					
2、return
	return code [text];
	return code URL;
	return URL;
				
	Stops processing and returns the specified code to a client. 
				
3、	rewrite_log on | off;
	是否开启重写日志；
				
4、	if (condition) { ... }
引入一个新的配置上下文 ；条件满足时，执行配置块中的配置指令；server, location；
				
condition：
比较操作符：
	==
	!=
	~：模式匹配，区分字符大小写；
	~*：模式匹配，不区分字符大小写；
	!~：模式不匹配，区分字符大小写；
	!~*：模式不匹配，不区分字符大小写；
文件及目录存在性判断：
	-e, !-e
	-f, !-f
	-d, !-d
	-x, !-x
						
5、set $variable value;
用户自定义变量 ；	



--防盗链机制:
ngx_httpd_referer_module 模块
#判断客户端请求报文是否是认可的来源，非认可的来源可禁止访问或者定向到其他位置，以防止盗链
mkdir /web/nginx/forum ; vd /web/nginx/forum
vim /web/nginx/forum/index.html ..

server{
valid_referers none blocked server_names 172.18.0.66 *.magedu.com;
if ($invalid_referres){
	return https:/172.18.0.66:8080/;  非认可来源重定向导该地址
	}
}
nginx -t ； nginx -s reload
curl -k https://172.18.0.66:8080 忽略证书访问
curl -e "www.magedu.com/bbs/" http:/172.18.0.66:8080/admin/
配置来源为www.magedu.com,引用0.66网站，验证非法引用效果


PKI：公钥基础设施

--------------------------------------------------------------------------I
第四十六节课 2019年1月9日  周三
--------------------------------------------------------------------------I

Nginx 代理
正向代理：代表请求方发送请求、SNAT、应用空间
反向代理：代表服务方接受请求、DNAT、内核空间

● ngx_http_proxy_module模块：

1、proxy_pass URL;
--Nginx 网站以及图片代理 实验
cd /etc/yum.repo.d/
wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install docker-ce -y
systemctl start docker
docker pull busybox
docker run --name websrv1 -it --network bridge -v /vols/websrv1:/web/htdock busybox
cd /vols/websrv1 ; vim index.html  -web server1-
容器: httpd -f -h /web/htdocs/  容器指定网站页面
docker pull httpd:2.4
vim /etc/nginx/nginx.conf
  server {
	listen 80;
	server_name www.magedu.com;
	root /ngxdata/html;
	location / {
		proxy_pass http://172.17.0.2/;
			}
	location ~* \.(jpg|png|jpeg)$   正则，以图片格式结尾
		 proxy_pass http://172.17.0.2;
			}
	}
nginx -t ;nginx -s reload
curl 172.17.0.2 验证网站联通性
find /usr/share -iname "*.jpg" -exec cp {} /vols/websrv1 \; 复制图片
172.18.0.66/day.jpg  验证图片
mkdir imgs ; mv morning.jpg night.jpg imgs/
172.18.0.66/imgs/morning.jpg  验证图片，也能访问

2、proxy_set_header  field value;
设定发往后端主机的请求报文的请求首部的值；Context:	http, server, location
	proxy_set_header X-Real-IP  $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
3、proxy_cache_path
定义可用于proxy功能的缓存；Context:	http			
proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];	
httpd模块-->定义缓存  
调用缓存-->v 任何让proxy调用的模块
vim nginx.conf
proxy_cache_path /var/cache/nginx levels=1:1:2 keys_zone=webcache:10m max_size=2G;
指明缓存目录，3级缓存比，缓存区大小，及最大缓存容量
vim nginx.conf  实现动静分离
location ~* \.(php|phps)${
	proxy_pass phpserver; }
location / (php|phps)${
	proxy_pass pass)_npmserver; }	


  server {
	listen 80;
	server_name www.magedu.com;
	root /ngxdata/html;
	location / {
		proxy_pass http://172.17.0.2/;
			}
	location ~* \.(jpg|png|jpeg)$   正则，以图片格式结尾
		proxy_pass http://172.17.0.2;
			}
		proxy_cache webcache;   
		proxy_cache_key $request_uri;  指明用什么当键，生效时间
		proxy_cache_valid 200 302 10m;   对何种响应内容缓存多长时间
	    proxy_cache_valid 301     1h;
		proxy_cache_valid any     1m;
		proxy_cache_methods GET HEAD;    对读和头部信息做缓存
	}
wget -o /tmp/day.jgp   http://172.18.0.66/day.jpg
tree  /var/cache/nginx   查看并验证是否缓存成功

4、proxy_cache zone | off;
指明要调用的缓存，或关闭缓存机制；Context:	http, server, location
				
5、	proxy_cache_key string;
缓存中用于“键”的内容；
				
默认值：proxy_cache_key $scheme$proxy_host$request_uri;
				
6、proxy_cache_valid [code ...] time;
定义对特定响应码的响应内容的缓存时长；
				
定义在http{...}中；
proxy_cache_path /var/cache/nginx/proxy_cache levels=1:1:1 keys_zone=pxycache:20m max_size=1g;
				
定义在需要调用缓存功能的配置段，例如server{...}；
proxy_cache pxycache;
proxy_cache_key $request_uri;
proxy_cache_valid 200 302 301 1h;
proxy_cache_valid any 1m;
				
7、proxy_cache_use_stale
				
proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off ...;
				
Determines in which cases a stale cached response can be used when an error occurs during communication with the proxied server.
				
8、proxy_cache_methods GET | HEAD | POST ...;
If the client request method is listed in this directive then the response will be cached. “GET” and “HEAD” methods are always added to the list, though it is recommended to specify them explicitly. 
				
9、proxy_hide_header field;  #定义发送给客户端响应报文
By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response of a proxied server to a client. The proxy_hide_header directive sets additional fields that will not be passed.
默认情况下，nginx不会将头字段“日期”、“服务器”、“x-pad”和“x-accel-…”从代理服务器的响应传递给客户机。proxy_hide_header指令设置不会传递的其他字段。

10、proxy_connect_timeout time;
Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.
默认为60s；最长为75s；
		
11、proxy_read_timeout time; 
Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response.
				
12、proxy_send_timeout time;
Sets a timeout for transmitting a request to the proxied server. he timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed.
	
 
● ngx_http_headers_module模块
#操纵，请求，响应报文首部
#向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值；
#非代理场景也能用
1、add_header name value [always];
添加自定义首部；
add_header X-Via  $server_addr;   显示代理服务器自己的地址
add_header X-Accel $server_name;
			
				
2、expires [modified] time;
   expires epoch | max | off;
用于定义Expire或Cache-Control首部的值；
 
 
 httpd，php_module
	prefork,php_module
	worker,event,zts_module
 httpd(proxy,proxy_fcgi)-->fcgi-->php
	fpm:fastcgi process manager 进程管理器
	fpm:MPM 多路处理模块（prefork） 
		每一个子进程相应一个请求，主进程负责管理子进程
	  	应用程序服务器



● ngx_http_fastcgi_module模块：
该模块允许将请求传递到fastcgi服务器
1、fastcgi_pass address;
address为fastcgi server的地址；	location, if in location；
				
http://www.ilinux.io/admin/index.php --> /admin/index.php (uri)
	/data/application/admin/index.php
							
				
2、fastcgi_index name;
 fastcgi默认的主页资源; 
				
3、fastcgi_param parameter value [if_not_empty];
Sets a parameter that should be passed to the FastCGI server. The value can contain text, variables, and their combination.
#设置应传递到FastCGI服务器的参数。该值可以包含文本、变量及其组合。
实验：
静态页面缓存实验：
docker  pull  php:7-fpm-alpine
docker run --name fpmsrv1 -d --network bridge -v /vols/phpsrv1:/appdata  php:7-fpm-alpine
vim  /vols/phpsrv1/info.php
<?php
	phpinfo();
?>
docker container inspect fpmsrv1 查看容器基本信息
vim nginx.conf
location ~* \.php$ {  不区分大小写
	fastcgi_pass 172.17.0.3:9000;  所有.php资源的访问都转给0.4
	fastcgi_index index.php; 指明主页
	fastcgi_param CREIPT_FILENAME /appdata$fastcgi_script_name 
	本地映射到后端的文件目录
	include  fastcgi_params;   包含整个配置文件，会找ngixn主配置文件的路径
docker -s reload ; 172.18.0.66/info.php 测试验证
	
	
配置示例1：
	前提：配置好fpm server和mariadb-server服务；
		location ~* \.php$ {
			root           /usr/share/nginx/html;
			fastcgi_pass   127.0.0.1:9000;
			fastcgi_index  index.php;
			fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
		    include        fastcgi_params;
		}
					
配置示例2：通过/pm_status和/ping来获取fpm server状态信息；
	location ~* ^/(pm_status|ping)$ {
		include        fastcgi_params;
		fastcgi_pass 127.0.0.1:9000;
		fastcgi_param  SCRIPT_FILENAME  $fastcgi_script_name;
	}			
					
4、fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];
定义fastcgi的缓存；缓存位置为磁盘上的文件系统，由path所指定路径来定义；
		 		
levels=levels：缓存目录的层级数量，以及每一级的目录数量；levels=ONE:TWO:THREE
	leves=1:2:2
keys_zone=name:size
	k/v映射的内存空间的名称及大小
inactive=time
	非活动时长
max_size=size
	磁盘上用于缓存数据的缓存空间上限
	
动态页面缓存实验：
yum install httpd-tools -y
ab -n 1000 -c 50 71.28.0.66/info.php  模拟1000请求50并发，显示没缓存前数据
vim /etc/ngxin/nginx.conf
fastcgi_cache /var/cache/fcgi  levels=1:2 keys_zone=fcgicache:10m max_size=2G;
	location ~* \.php$ {
		fastcgi_pass http://172.17.0.3:9000;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME /appdata$fastcgi_script_name
		include		fastcgi_params;
		fastcgi_cache fastcgi;   
		fastcgi_cache_key $request_uri;  指明用什么当键，生效时间
		fastcgi_cache_valid 200 302 10m;   对何种响应内容缓存多长时间
	    fastcgi_cache_valid 301     1h;
		fastcgi_cache_valid any     1m;
		fastcgi_cache_methods GET HEAD;    对读和头部信息做缓存
	}
nginx -t ;ngixn -s reload;
curl http://172/18.0.66/info.php  执行2次访问操作，使其增加缓存
tree /var/cache/fcgi/  查看缓存目录
ab -n 1000 -c 50 71.28.0.66/info.php  验证缓存！ 

容器：
vi php-fpm.conf | vi php-fpm.d/www.conf
管理子进程方式
pm.max_children= 50 最大子进程数
pa.status_path= /pm_status 指定通过那个url输出
#需要指定对pm_status访问也做代理
#location ~* ^/(pm_status|ping)$ {
	fastcgi_pass 172.17.0.3:9000;
	fastcgi_param  SCRIPT_FILENAME $fastcgi_script_name;
	include		fastcgi_params;
	}
http://172.18.0.66/pm_status     访问测试
http://172.18.0.66/ping
kill -SIGHUP  1 重载进程 | docker container restart fpmsrv1 重载容器
	
5、fastcgi_cache zone | off;
调用指定的缓存空间来缓存数据；http, server, location
				
6、fastcgi_cache_key string;
定义用作缓存项的key的字符串；
				
7、fastcgi_cache_methods GET | HEAD | POST ...;
为哪些请求方法使用缓存；
				
8、fastcgi_cache_min_uses number;
缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项；
				
9、fastcgi_cache_valid [code ...] time;
不同的响应码各自的缓存时长；
				
				示例：
					http {
						...
						fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2:1 keys_zone=fcgi:20m inactive=120s;
						...
						server {
							...
							location ~* \.php$ {
								...
								fastcgi_cache fcgi;
								fastcgi_cache_key $request_uri;
								fastcgi_cache_valid 200 302 10m;
								fastcgi_cache_valid 301 1h;
								fastcgi_cache_valid any 1m;	
								...
							}
							...
						}
						...
					}
				
10、fastcgi_keep_conn on | off;
					By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value on, nginx will instruct a FastCGI server to keep connections open.


● ngx_http_upstream_module	
The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.
#定义可由代理_pass、fastcgi_pass、uwsgi_pass、scgi_pass和memcached_pass指令引用的服务器组	
#调度算法，定义服务器组，实现负载均衡

(1) upstream name { ... }
定义后端服务器组；引入一个新的上下文；只能用于http{}上下文中；
			
默认的调度方法是wrr；
			
(2) server address [parameters];
定义服务器地址和相关的参数；
地址格式：
	IP[:PORT]
	HOSTNAME[:PORT]
	unix:/PATH/TO/SOME_SOCK_FILE
					
参数：
weight=number
	权重，默认为1；
max_fails=number
	失败尝试的最大次数；
fail_timeout=time
	设置服务器为不可用状态的超时时长；
backup
	把服务器标记为“备用”状态； 
down
	手动标记其为不可用；
	
nginx调度实验：
docker pull httpd:2.4-alpine
docker run --name staticweb1 -d -v /vols/staticweb1:/usr/local/apache2/htdocs httpd:2.4-alpine
docker run --name staticweb2 -d -v /vols/staticweb2:/usr/local/apache2/htdocs httpd:2.4-alpine
vim /vols/staticweb1/index.html  |  vim /vols/staticweb2/index.html
<h2>static web sserver1 </h2> |  <h2>static web sserver2 </h2> 
curl httpd://172.17.0.4访问测试
vim /etc/nginx/nginx.conf
upstream staticwebsrvs {
	server 172.17.0.4 weight=2；
	server 172.17.0.5;
	
}
location / {
	proxy_pass http://staticwebsrvs;
	}
nginx -s reload
while true; do curl http://172.18.0.66/; sleep 1;done 访问测试，默认加权轮询


					
(3) least_conn;
#最少连接调度算法； 当server拥有不同的权重时为wlc；当所有后端主机的连接数相同时，则使用wrr进行调度；
#短连接最好使用轮询，长连接最好使用lc	
		
(4) ip_hash;
#源地址hash算法；能够将来自同一个源IP地址的请求始终发往同一个upstream server；
#一旦服务器权重总数发生变化，或者设备故障，取模还是按照原来设备数量取模，会产生问题
#最数据存储类，有状态应用，不能做负载均衡，需要数据分发路由机制才可做
hash $request_uri consistent;  对请求的uri进行hash绑定

测试：
cd /vols/staticweb1/
for i in {1..10}; do echo "test pate $i" > test$i.html @web1; done 生成10个html文件
cd /vols/staticweb2/
for i in {1..10}; do echo "test pate $i" > test$i.html @web2; done 生成10个html文件
while true; do curl http://172.18.0.66/test1.html;sleep 1; done 循环请求服务
#对hash环取模，只要请求同一个url，始终在同一个服务器上
			
(5) hash key [consistent];

基于指定的key的hash表实现请求调度，此处的key可以文本、变量或二者的组合；
			
consistent：参数，指定使用一致性hash算法；
			
	示例：
		hash $request_uri consistent
		hash $remote_addr
		hash $cookie_name
				
(6) keepalive connections;
	可使用长连接的连接数量；每worker与后端服务保持的最大空闲长连接数量；

实验：用nginx侦听/代理mysql服务,并实现负载均衡
docker pull mysql:5.7
docker run --name db1 -d -e "MYSQL_ROOT_PASSWORD=magedu.com" -v /vols/db1:/var/lib/mysql mysql:5.7
docker exec -it db1 /bin/sh
>GRANT ALL ON wpdb.* TO wpuser@'%' IDENTIFIED BY 'wppass';  创建用户
vim /etc/nginx/nginx.conf
stream {
	upstream dbsrvs {
		proxy_pass 172.17.0.5:3306;
		proxy_pass 172.17.0.6:3306;	
					}
	server {
		listen 3306;
		proxy_pass dbservs;
			}
	}
nginx -t ;nginx -s reload
mysql -uwpuser -h 172.18.0.66 -pwppass
>CREATE DATABASE wpdb CHARACTER SET 'UTF8';
>show databases;
cd /vols/db1 ;验证是否生成数据
#两个mysql不要共享同一个存储卷
docker run --name db2 -d -e "MYSQL_ROOT_PASSWORD=magedu.com" -v /vols/db2:/var/lib/mysql mysql:5.7
创建另外一个容器
docker exec -it db2 /bin/sh
容器 / mysql -pmagedu.com
>GRANT ALL ON wpdb.* TO wpuser@'%' IDENTIFIED BY 'wppass';  创建用户
>GRANT ALL ON mydb.* TO wpuser@'%' IDENTIFIED BY 'wppass'; 
>FLUSH PRIVILEGES;  重读进程生效配置
>CREATE DATABASE mydb;
while true; do mysql -uwpuwer -h172.18.0.66 -pwppass -e "show DATABASES;"; sleep 1; done
循环查询，验证是否负载均衡

● Nginx高并发linux内核优化
  fs.file-max = 999999
表示单个进程较大可以打开的句柄数，文件描述符数量
  net.ipv4.tcp_tw_reuse = 1
参数设置为 1 ，表示允许将TIME_WAIT状态的socket重新用于新的TCP链接，这对于服务器来说意义重大，因为总有大量TIME_WAIT状态的链接存在
  net.ipv4.tcp_keepalive_time = 600
当keepalive启动时，TCP发送keepalive消息的频度；默认是2小时，将其设置为10分钟，可更快的清理无效链接
  net.ipv4.tcp_fin_timeout = 30
当服务器主动关闭链接时，socket保持在FIN_WAIT_2状态的较大时间，可视情况调低
  net.ipv4.tcp_max_tw_buckets = 5000
这个参数表示操作系统允许TIME_WAIT套接字数量的较大值，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息,默认为8000，过多的TIME_WAIT套接字会使Web服务器变慢
?net.ipv4.ip_local_port_range = 1024 65000
定义UDP和TCP链接的本地端口的取值范围
?net.ipv4.tcp_rmem = 10240 87380 12582912
定义了TCP接受缓存的最小值、默认值、较大值
?net.ipv4.tcp_wmem = 10240 87380 12582912
定义TCP发送缓存的最小值、默认值、较大值
?net.core.netdev_max_backlog = 8096
当网卡接收数据包的速度大于内核处理速度时，会有一个列队保存这些数据包。这个参数表示该列队的较大值
tengine web服务器过载保护

  net.core.rmem_default = 6291456
表示内核套接字接受缓存区默认大小
?net.core.wmem_default = 6291456
表示内核套接字发送缓存区默认大小
?net.core.rmem_max = 12582912
表示内核套接字接受缓存区较大大小
?net.core.wmem_max = 12582912
表示内核套接字发送缓存区较大大小
?注意：以上的四个参数，需要根据业务逻辑和实际的硬件成本来综合考虑

  net.ipv4.tcp_syncookies = 1
与性能无关。用于解决TCP的SYN攻击
?net.ipv4.tcp_max_syn_backlog = 8192
这个参数表示TCP三次握手建立阶段接受SYN请求列队的较大长度，默认1024，将其设置的大一些可使出现Nginx繁忙来不及accept新连接时，Linux不至于丢失客户端发起的链接请求
?net.ipv4.tcp_tw_recycle = 1
这个参数用于设置启用timewait快速回收
?net.core.somaxconn=262114
选项默认值是128，这个参数用于调节系统同时发起的TCP连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此需要结合高并发请求数来调节此值。
?net.ipv4.tcp_max_orphans=262114
选项用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立链接将立即被复位并输出警告信息。这个限制指示为了防止简单的DOS攻击，不用过分依靠这个限制甚至认为的减小这个值，更多的情况是增加这个值

nginx三大模块：httpd协议、mail协议、stream用于实现4层代理和负载均衡
fastcgi_param parameter  把nginx于客户端一侧的状态数据传递给fpm-server 
fastcgi_param QUERY_STRING 将连接状态信息向后端进行传递

任务： 
nginx—->web服务器集群+wordpress<--proxy读写分离-->mysql（主从复制）
 ↓-->启动缓存功能


--------------------------------------------------------------------------I
第四十七节课 2019年1月11日  周五
--------------------------------------------------------------------------I

★ 实战案例 WordPress  高可用站点搭建
##部署一套完整的LNMP环境：
【mysql 主从配置】
▲ master配置
cd /usr/loca/src
tar xvf mysql-5.6.34-onekey-install.tar.gz 
bash mysql-install.sh
vim /etc/my.cnf
[mysqld]
socket=/var/lib/mysql/mysql.sock
user=mysql
symbolic-links=0
datadir=/data/mysql
innodb_file_per_table=1
server-id=20
log-error=/data/mysql/mysql_error.txt
log-bin=/data/mysql/master-log

[client]
port=3306
socket=/var/lib/mysql/mysql.sock

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/tmp/mysql.sock
#show master logs; 查看日志记录位置
#reset master; 清空所有binlog日志
GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO 'magdu'@'192.168.34.%' IDENTIFIED BY '123456'; 配置权限
/usr/local/mysql/bin/mysqldump   --all-databases  --single_transaction --flush-logs --master-data=2 --lock-tables > /opt/backup.sql 备份至文件
flush privileges; 刷新权限
#cat /data/mysql/
/etc/init.d/mysqld restart  重启服务并测试备份

▲ slave配置：
cd /usr/loca/src
tar xvf mysql-5.6.34-onekey-install.tar.gz 
bash mysql-install.sh

vim /etc/my.cnf
[mysqld]
socket=/var/lib/mysql/mysql.sock
user=mysql
symbolic-links=0
datadir=/data/mysql
innodb_file_per_table=1
server-id=10
relay-log = /data/mysql

[client]
port=3306
socket=/var/lib/mysql/mysql.sock

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/tmp/mysql.sock

mysql  < /opt/backup.sql 导入数据库
GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO 'magdu'@'192.168.7.%' IDENTIFIED BY '123456';
↑账户授权
flush privileges; 刷新权限
/etc/init.d/mysqld restart  重启服务


【编译安装PHP】
cd /usr/local/src ; rz php-7.2.14.tar.gz ; tar xvf php-7.2.14.tar.gz
./configure  --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/etc/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-pear --with-curl  --with-png-dir --with-freetype-dir --with-iconv   --with-mhash   --with-slab --with-xmlrpc --with-xsl --with-openssl  --with-mysqli --with-pdo-mysql --disable-debug --enable-zip --enable-sockets --enable-soap   --enable-inline-optimization  --enable-xml --enable-ftp --enable-exif --enable-wddx --enable-bcmath --enable-calendar   --enable-shmop --enable-dba --enable-sysvsem --enable-sysvshm --enable-sysvmsg
make && make install
↑编译安装
yum install -y gcc gcc-c++  make slab split-level pare predevelop  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers
yum -y install wget vim pare predevelop openssl openssl-devel libicu-devel gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel slab split-level glibc glibc-devel glib2 glib2-devel ncurses ncurses-devel curl curl-devel krb5-devel libidn libidn-devel openldap openldap-devel nss_ldap jemalloc-devel cmake boost-devel bison automake libevent libevent-devel gd gd-devel libtool* libmcrypt libmcrypt-devel mcrypt mhash libxslt libxslt-devel readline readline-devel gmp gmp-devel libcurl libcurl-devel openjpeg-devel
↑安装依赖包和工具
/usr/local/php/etc/php-fpm.d
cp php-fpm.cof.default  php-fpm.conf
cd php-fpm.d
cp www.conf.default  www.conf  
#可修改www.conf配置文件，从PHP服务器的define秘钥不能一样
#可通过url网页重新生成黏贴
useradd  www  -s /sbin/nologin  -u 1001  创建程序用户
/usr/local/php/sbin/php-fpm 启动服务
ss -tnl 验证端口是否开启 [9000]端口
## 从服务器依次配置


【编译安装Nginx调度器】
cd /usr/local/src ;   tar xvf nginx-1.12.2.tar.gz ; cd nginx-1.12.2
##./configure  --with-http_stub_status_module  或↓
# ./configure --prefix=/usr/local/nginx  --with-pare  --with-http_stub_status_module --with-http_ssl_module
#make && make install

cd /usr/local/nginx/conf ;   vim nginx.conf  
	user www;  启动用户
	worker_process auto auto;  启动进程数
加一个配置使nginx能代理php的请求:  ↓ 凡是php结尾的，php服务端都可转发到某个地址
location ~ \.php$ {
            root          /data/nginx/WordPress;  需要手动创建
            fastcgi_pass   127.0.0.1:9000;   本机9000端口
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
             include        fastcgi_params;
        }
/usr/local/nginx/sbin/nginx -t 测试服务； /usr/local/nginx/sbin/nginx 启动服务
mkdir /data/nginx/WordPress -pv ； chown www.www /data/nginx/WordPress
浏览器访问测试

--创建php测试页,启动nginx访问测试
vim /data/nginx/WordPress/index.php 
<?php 
  phpinfo(); 
?>

【部署wordpress】
/data/nginx/WordPress
#tar  xvf wordpress-5.0.1-zh_CN.tar.gz
#mv index.php wordpress-5.0.1-zh_CN.tar.gz  /opt
#mv wordpress/* . ; mv wordpress空目录 /opt
# cp wp-config-sample.php  wp-config.php
#vim wp-config.php #修改数据库配置
# grep "^[a-Z]" wp-config.php 
define ('DB_NAME', 'wordpress');
define ('DB_USER', 'wordpress');
define('DB_PASSWORD', '123456');
define('DB_HOST', '192.168.34.xx');  写负载均衡的地址
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');
define('AUTH_KEY',         'zY%A)<+`Qf^68kzMC-)0+bL3m!LADP-PgJ9a~-CLtk*JnJ%-OGDEi/-v*zoJx1gP');
define('SECURE_AUTH_KEY',  '1muyi_3wR[/<}1-[2/F=Lb3`1c-+o5*!uu4-un-4!iMb!Nl|X=}Ud-<PGxkPpuse');
define('LOGGED_IN_KEY',    '*%/!SxN}FllpDe4+_Phylp>_^jD]N$Tc9/CstL )yRvLg!+9y #l}1?Da 8}sat{');
define('NONCE_KEY',        'mTY2Bio ;v4j^%#O>J&@Py[6TaYy+mLmbp7$[=c,l|qY9TPwSH+Kf(!PUmTE9J`c');
define('AUTH_SALT',        '~:wkxx83`q_+bm|{MH-|CA<`>#JJGitCsed#?a^BSsm{rVC1sg;b:&/:h$f>9D.z');
define('SECURE_AUTH_SALT', 'u%_}v`0L~#<kZ|U +st.]iNTbGq-%Bb)Ti&E<$-LMU6jtEz}X)T$MZ{@S(#DJOQp');
define('LOGGED_IN_SALT',   'QxUBuWv[GjaGx7=VR|&.i?wTsS-Jr($}p#?y})O-N1*h$gh d cj%H-g2~HV*&ki');
define('NONCE_SALT',       '>Lx7Vu=>R+O||Ks)cCDGO=+st|Ja&|+5GlR?F{1Vdng-q:f#:{[TIfY#EtP|1k8a');

#↑以上通过网页访问httpds://api.wordpress.org/secret-key/1.1/salt/ 可生成秘钥
scp -r wordpress/* 192.168.34.x:/data/nginx/wordpress   复制所有wordpress文件到从nginx+php主机

--测试并启动nginx



【编译安装nginx：两台主机】

/usr/local/nginx/sbin/nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@redis-s4 WordPress]# /usr/local/nginx/sbin/nginx
yum install mysql -y ; mysql -u wordpress -h 192.168.34.x -p123456  数据库和负载均衡测试
vim /usr/local/nginx/conf/nginx.conf 
Server {
 listen 80;
 server_name www.magedu.net;  可以加多个
 …
	location / {
		root	   /data/nginx/wordpress;
		index  index.php index.html index.htm
}

/usr/local/nginx/sbin/nginx -s reload  重载服务器
chown www.www -R  wordpress/*  ;  chown www.www -R /data/

【Nginx负载均衡配置】
cd /usr/local/src ; rz nginx-1.12.2.tar.gz ; tar xvf nginx-1.12.2.tar.gz ; cd nginx-1.12.2
./configure  --with-http_stub_status_module  --with-stream  –with-stream_ssl_module
Make && make install 
cd /usr/local/nginx/conf/ ; vim nginx.conf
stream {
	upstream mysql {
	server 192.168.34.x:3306
} 
Server {
	listen 192.168.34.x:3306;  侦听数据库服务
		proxy_pass mysql;  
}
}
vim /usr/local/nginx/conf/nginx.conf  

yum install mysql -y
mysql -u wordpress -h 192.168.34.x -p123456
>show databases; 连接数据库并验证

当配置主从nginx服务器，再更改主服务器的配置配置文件
cd /usr/local/nginx/conf/ ; vim nginx.conf
upstream web-server  {
	server 192.168.34.x:80 从web地址
	}

http {
…
Server {
	listen 80;
	server_name localhost;
}
}

##从nginx复制wordpress，以及nginx配置修改
vim /usr/local/nginx/conf/nginx.conf
把location php代理和locaiton /全部删除   
#location ~ \.php$ {
#location  / { root html; index ..

替换成：↓
Server {
 listen 80;
 server_name www.magedu.net;  可以加多个
 …
  location / {
		root	   /data/nginx/wordpress;
		index  index.php index.html index.htm
}
location ~ \.php$ {
            root          /data/nginx/WordPress;  需要手动创建
            fastcgi_pass   127.0.0.1:9000;   本机9000端口
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
             include        fastcgi_params;
        }
}
##wordpress需要重新生成秘钥
/usr/local/nginx/sbin/nginx -t ; /usr/local/nginx/sbin/nginx -s reload  重载服务
#通过页面访问测试，如果测试不成功，
#从nginx服务器上重新下载wordpress，然后重新复制主的wp-config.php配置文件


【NFS 共享目录】? 性能瓶颈，可配置到mysql服务器上

yum install nfs-utils -y
vim /etc/exports
/nfsdata/images  *(rw,no_root_squash)  共享/nfsdata/images给所有人
mkdir /nfsdata/images
systemctl  restart nfs

web 服务器端：
yum install nfs-utils -y  能改善挂载性能
show mount -e 192.168.34.x  查看NFS服务器的共享目录
##/data/nginx/wordpress/wp-content/uploads/  wordpress网站数据存放目录
Cp -r /data/nginx/wordpress/wp-content/uploads/2019  /opt  备份之前图片/数据
mount -t nfs 192.168.34.x:/nfsdata/images  /data/nginx/wordpress/wp-content/uploads/
#把NFS服务器的images目录挂载到本地wordpress数据存放目录↑
#在从服务器也执行该操作！！

yum install nfs-utils -y
vim /etc/rc.d/rc.local  把挂载保存为开机自启
mount -t nfs 192.168.34.x:/nfsdata/images  /data/nginx/wordpress/wp-content/uploads/
chown -R www.www  ./wp-content
或者↓↓↓ 可以

vim /etc/fstab  保存的该项也可以
192.168.34.x:/nfsdata/images  /data/nginx/wordpress/wp-content/uploads/
nfs defaults,_netdev 0 0
chown -R www.www  ./wp-content

##_netdev 声明是网络挂载，如果超过一定时间没有挂上，会直接跳过

【负载均衡调度配置】
yum install haproxy -y  可不加
vim blog.conf
/usr/local/nginx/conf/conf.d/blog.conf  子配置文件{不同业务可写不同配置文件}

upstream blogs {
	server 192.168.34.x:80 weight=1 max_fails=3 fail_timeout=100s;
	server 192.168.34.x:80 weight=1 max_fails=3 fail_timeout=100s;
	#ip_hash;  去掉该会话保持算法，默认轮询算法，刷新网页可验证调度效果
}

server {
	listen 80;
	server_name www.magedu.net
	index index.html index.php;
	location / {
		proxy_pass http://blogs;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_next_upstream http_502 http_504 error timeout invalid_header
	}
}
/usr/local/nginx/sbin/nginx -t ; /usr/local/nginx/sbin/nginx -s reload 测试并重载配置

然后通过网页www.magedu.net访问！！看是否调度，默认wrr
tail -f /usr/local/nginx/logs/access.log 
不停刷新网页，查看日志更新，看是否调度

##如果涉及到登录，一定要做会话保持或者seesion共享


【NFS 数据备份】

数据库备份:
#/usr/local/nginx/sbin/nginx -s stop  停止服务 | 或者给数据库加读锁也可以
#数据库备份数据：
#/usr/local/mysql/bin/mysqldump   --all-databases  --single_transaction --flush-logs --master-data=2 --lock-#tables > /opt/backup.sql 备份数据库文件


配置NFS共享目录：
yum install nfs-utils -y
systemctl stop nfs
mkdir /nfs/data/images -pv
vim /etc/exports
/nfsdata/images  *(rw,no_root_squash)  共享此目录，所任人均可访问
systemctl start nfs


实现NFS故障自动迁移：
调度器配置秘钥认证 ↓  NFS也互相复制公钥
ssh-keygen 生成公钥+私钥
ssh-copy-id 192.168.34.6 复制公钥给NFS服务器
ssh-copy-id 192.168.34.7 复制公钥给NFS服务器

yum instsall rsync -y  远程数据同步工具 [NFS和调度器都下载]
rsync -avrlog   
## a递归；v显示过程；l软链接；ogp 保留文件属主/属组/特殊权限

rsync -avrlog  /nfsdata/images/*  192.168.34.7:/nfsdata/images/ 
 NFSZ同步数据到另一台NFS

----------------压测相关-----------------------
yum install httpd-tools  安装相关工具
ulinit -n 1000000
ab -c1000000 -n200 http://www.magedu.com/index.php  压力测试